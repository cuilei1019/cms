ssm spring springmvc mybatis    ssm+redis+kafka+elasticsearch+jquery+jquerydatatables +bootstrap +git+maven 开发cms系统

--------------------------
spring与kafka 整合  

   1.走走官网
   
下面讲解的是spring与kafka集成的生产者操作的实现   
========================================   
   2.spring与kafka集成
      2.1 引入依赖pom.xml文件中加入
	     <!-- https://mvnrepository.com/artifact/org.springframework.kafka/spring-kafka -->
		<dependency>
		    <groupId>org.springframework.kafka</groupId>
		    <artifactId>spring-kafka</artifactId>
		    <version>2.2.0.RELEASE</version>
		</dependency>
		
		
		<dependency>
		    <groupId>org.apache.kafka</groupId>
		    <artifactId>kafka_2.10</artifactId>
		    <version>0.8.2.1</version>
		    <exclusions>
		        <exclusion>
		            <artifactId>jmxri</artifactId>
		            <groupId>com.sun.jmx</groupId>
		        </exclusion>
		        <exclusion>
		            <artifactId>jms</artifactId>
		            <groupId>javax.jms</groupId>
		        </exclusion>
		        <exclusion>
		            <artifactId>jmxtools</artifactId>
		            <groupId>com.sun.jdmk</groupId>
		        </exclusion>
		    </exclusions>
		</dependency>
		
		2.2 加入spring与kafka集成-引入一个生产者的配置文件applicationContext-kafka-producer.xml
		     配置文件
			     参数设置
				    bootstrap.servers=localhost:9092
                    # consumer group id
                    group.id=test-consumer-group
					#序列化的配置
					key.serializer
					value.serializer
			   ---------------------------------------------------	
			   producerFactory工厂
			      使用参数设置bean
               ----------------------------------------------------
               操作的kafka模板bean对象
			      注意事项：用到主题：
				     <!--设置对应topic -->
		                <property name="defaultTopic" value="test" />
				
内容如下：				
				
				<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	    http://www.springframework.org/schema/beans/spring-beans.xsd
	    http://www.springframework.org/schema/context
	    http://www.springframework.org/schema/context/spring-context.xsd">

	<!--参数配置 -->
	<bean id="producerProperties" class="java.util.HashMap">
		<constructor-arg>
			<map>
				<!-- kafka服务地址，可能是集群 value="localhost:9092,localhost:9093,localhost:9094"-->
				<entry key="bootstrap.servers" value="192.168.73.129:9092" />
				<entry key="group.id" value="test-consumer-group" />
				<!-- 有可能导致broker接收到重复的消息-->
				<entry key="retries" value="0" />
				<!-- 每次批量发送消息的数量 -->
				<entry key="batch.size" value="1638" />
				<!-- 默认0ms，在异步IO线程被触发后（任何一个topic，partition满都可以触发） -->
				<entry key="linger.ms" value="1" />
				<!--producer可以用来缓存数据的内存大小。如果数据产生速度大于向broker发送的速度，producer会阻塞或者抛出异常 -->
				<entry key="buffer.memory" value="33554432 " />
				<entry key="key.serializer"
					value="org.apache.kafka.common.serialization.IntegerSerializer" />
				<entry key="value.serializer"
					value="org.apache.kafka.common.serialization.StringSerializer" />
			</map>
		</constructor-arg>
	</bean>

	<!-- 创建kafkatemplate需要使用的producerfactory bean -->
	<bean id="producerFactory"
		class="org.springframework.kafka.core.DefaultKafkaProducerFactory">
		<constructor-arg>
			<ref bean="producerProperties" />
		</constructor-arg>
	</bean>

	<!-- 创建kafkatemplate bean，使用的时候，只需要注入这个bean，即可使用template的send消息方法 -->
	<bean id="KafkaTemplate"
		class="org.springframework.kafka.core.KafkaTemplate">
		<constructor-arg ref="producerFactory" />
		<!--设置对应topic -->
		<property name="defaultTopic" value="test" />
	</bean>
</beans>		

==========================================================================================================
3.测试一下kafka生产者发送消息的效果
   3.0 关闭防火墙 
       service iptables stop
	   为了项目开发测试，暂时先永久性关闭防火墙
       chkconfig iptables off //永久关闭防火墙
	        chkconfig是当前不生效，Linux重启之后才生效的命令(开机自启动项)
            service是即使生效，重启后失效的命令
			
			
   3.1 启动zookeeper
       zkServer.sh start
   3.2 启动kafka  在启动kafka之前记得修改kafka的server.properties文件
              加入：#advertised.listeners=PLAINTEXT://your.host.name:9092
              advertised.listeners=PLAINTEXT://192.168.73.129:9092  //ip地址为自己的ip地址
			  
			  

       /usr/local/kafka/bin/kafka-server-start.sh /usr/local/kafka/config/server.properties
	   
   3.3 确定有没有这个test的主题，没有创建主题
       3.3.1查看主题
	   /usr/local/kafka/bin/kafka-topics.sh -list --bootstrap-server localhost:9092
       3.3.2创建主题
	   /usr/local/kafka/bin/kafka-topics.sh -create --bootstrap-server localhost:9092 -replication-factor 1 --partitions 1 --topic test
   3.4 启动消费者
       /usr/local/kafka/bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test --from-beginning


   3.5编写测试类
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations= {"classpath:applicationContext-kafka-producer.xml"})
public class KafkaProducerTest {

	@Autowired
	private KafkaTemplate<Integer, String> kafkaTemplate;
	
	@Test
	public void testSendMsg() {
		kafkaTemplate.sendDefault("hello Java Producer kafka");
	}
}
运行测试。。


下面讲解的spring与kafka集成的消费者操作
=================================================================================================================
4.加入spring与kafka集成-引入一个生产者的配置文件applicationContext-kafka-consumer.xml
   4.1 
      consumer 参数设置
	  consumer 工厂设置
	  监听者  自己创建bean bean要想监听到数据，它要实现特定的接口org.springframework.kafka.listener.MessageListener
	  容器参数设置
	      1.监听者是谁
		  2.监听的主题  test主题
	  kafka的监听容器设置
	      1.容器参数
		  2.kafka consumer 工厂设置
	  
配置文件内容如下：	  
	  
	  <?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	    http://www.springframework.org/schema/beans/spring-beans.xsd
	    http://www.springframework.org/schema/context
	    http://www.springframework.org/schema/context/spring-context.xsd">

	<bean id="consumerProperties" class="java.util.HashMap">
		<constructor-arg>
			<map>
				<!--Kafka服务地址 -->
				<entry key="bootstrap.servers" value="192.168.73.129:9092" />
				<!--Consumer的组ID，相同group.id的consumer属于同一个组。 -->
				<entry key="group.id" value="test-consumer-group" />
				<!--如果此值设置为true，consumer会周期性的把当前消费的offset值保存到zookeeper。当consumer失败重启之后将会使用此值作为新开始消费的值。 -->
				<entry key="enable.auto.commit" value="true" />
				<!--网络请求的socket超时时间。实际超时时间由max.fetch.wait + socket.timeout.ms 确定 -->
				<entry key="session.timeout.ms" value="15000 " />
				<entry key="key.deserializer"
					value="org.apache.kafka.common.serialization.IntegerDeserializer" />
				<entry key="value.deserializer"
					value="org.apache.kafka.common.serialization.StringDeserializer" />
			</map>
		</constructor-arg>
	</bean>


	<!-- 创建consumerFactory bean -->
	<bean id="consumerFactory"
		class="org.springframework.kafka.core.DefaultKafkaConsumerFactory">
		<constructor-arg>
			<ref bean="consumerProperties" />
		</constructor-arg>
	</bean>
	
	
	<!--指定具体监听类的bean -->
	<bean id="messageListernerConsumerService"
		class="com.chj.cms.kafka.KafkaConsumerListener" />


	<bean id="containerProperties"
		class="org.springframework.kafka.listener.ContainerProperties">
		<constructor-arg value="test" />
		<property name="messageListener"
			ref="messageListernerConsumerService" />
	</bean>


	<bean id="messageListenerContainer"
		class="org.springframework.kafka.listener.KafkaMessageListenerContainer"
		init-method="doStart">
		<constructor-arg ref="consumerFactory" />
		<constructor-arg ref="containerProperties" />
	</bean>

</beans>	


  监听者的类：
    package com.chj.cms.kafka;

import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.springframework.kafka.listener.MessageListener;

public class KafkaConsumerListener implements MessageListener<Integer, String> {

	@Override
	public void onMessage(ConsumerRecord<Integer, String> data) {
		
		System.out.println("接受到的消息"+data.value());
		
	}

}



5.测试一下kafka接受消息的效果	
   5.1 启动zookeeper
       zkServer.sh start
   5.2 启动kafka
       /usr/local/kafka/bin/kafka-server-start.sh /usr/local/kafka/config/server.properties
	   
   5.3 确定有没有这个test的主题，没有创建主题
       3.3.1查看主题
	   /usr/local/kafka/bin/kafka-topics.sh -list --bootstrap-server localhost:9092
       3.3.2创建主题
	   /usr/local/kafka/bin/kafka-topics.sh -create --bootstrap-server localhost:9092 -replication-factor 1 --partitions 1 --topic test
   5.4 创建消息发送者 
        /usr/local/kafka/bin/kafka-console-producer.sh --broker-list  localhost:9092 --topic test 




测试内容

package com.chj.cms.test;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class KafkaConsumerTest {

	public static void main(String[] args) {
		ApplicationContext ac = new ClassPathXmlApplicationContext("applicationContext-kafka-consumer.xml");
	}
}













		
		
		
		
		
	      